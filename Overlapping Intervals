class Solution {
    public List<int[]> mergeOverlap(int[][] arr) {
        Map<Integer,Integer> map = new HashMap<>();
        List<Integer> list = new ArrayList<>();
        for(int i=0; i<arr.length; i++ ){
            if( map.containsKey(arr[i][0]) ) {
                int prev = map.get(arr[i][0]);
                map.put( arr[i][0], Math.max( prev, arr[i][1]) );
            }
            else {
            map.put( arr[i][0],arr[i][1] ); 
            list.add(arr[i][0]);    }
        }
        Collections.sort(list);
        
        for( int i=0; i<list.size()-1; ){
            int s1 = list.get(i);
            int e1 = map.get( list.get(i) );
            int s2 = list.get(i+1);
            int e2 = map.get( list.get(i+1) );
            
            if(s1<=s2 && e2<= e1 ){
                map.put(s1,e1);
                map.remove(s2);
                list.remove(i+1);
            } else if ( s2<=s1 && e1<= e2 ){
                map.put(s2,e2);
                map.remove(s1);
                list.remove(i);
            } else if( s1 <= s2 && s2 <= e1  && s2 <= e1 && e1<= e2 ){
                map.put(s1,e2);
                map.remove(s2);
                list.remove(i+1);
            } else if( s2 <= s1 && s1 <= e2  && s1 <= e2 && e2 <= e1 ){
                map.put(s2,e1);
                map.remove(s1);
                list.remove(i);
            } else{
                i++;
            } 
        }
        List<int[]> ll = new LinkedList<>();
        for(int i=0; i<list.size(); i++ ){
            int[] array = { list.get(i), map.get( list.get(i) ) } ;
            ll.add( array );
            //System.out.println( list.get(i) );
        }
        
         
         return ll;
    }
}
